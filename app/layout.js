'use client';
import 'bootstrap/dist/css/bootstrap.min.css';
import "bootstrap-icons/font/bootstrap-icons.css";
import {React, useEffect,useState} from 'react';
import { UserProvider } from '@auth0/nextjs-auth0/client';
import Pokedex from 'pokedex-promise-v2';
import './globals.scss'
import { Inter } from 'next/font/google'
import Header from "./components/Header";
import PokedexContext from './components/context/PokedexContext';

const inter = Inter({ subsets: ['latin'] })

// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }



export default function RootLayout({ children }) {


        const [starterList, setStartList] = useState([]);
        const [starterLibrary, setlibrary] = useState([]);
        // setting my state to empty array 
        const [state, setState] = useState([]);
        const currentBatchPokemon = state.pokemonList;

        const setInitialPokemonList = (pokemonList) => {
            setState({
              ...state, pokemonList
          });
        }

        const handleNewBatch = (pokemonList) => {
          setState({
              ...state, pokemonList
          });
      }

              // function to handle updating of starterList state when child cardSlider component function to ADD pokemon is called by user 
        const handleNewStarterAdd = (newAdditionPokeList) => {
          setStartList([
              ...starterList, ...newAdditionPokeList
          ]);
          // retrieving the current localStorage
          const starterListPokemon = JSON.parse(localStorage.getItem('starterList'));
          // then adding our newly added pokemomn from the addToStarter function to the localStorage we retrieved 
          starterListPokemon.push(newAdditionPokeList[0]);
          // setting our localStorage to the updated starterList with our newly added pokemon
          localStorage.setItem('starterList', JSON.stringify(starterListPokemon));

      }

      const handleNewPokedexEntry = (newLibraryPokemon) => {
        setlibrary([
            ...starterLibrary, ...newLibraryPokemon
        ]);
        const starterLibraryPokedex = JSON.parse(localStorage.getItem('starterLibrary'));
        // then adding our newly added pokemomn from the addToStarter function to the localStorage we retrieved 
        starterLibraryPokedex.push(newLibraryPokemon[0]);
        // setting our localStorage to the updated starterList with our newly added pokemon
        localStorage.setItem('starterLibrary', JSON.stringify(starterLibraryPokedex));
        // after an item is deleted from startList i update the localStorage to reflect deleted pokemon 
    }

    const handleStarterDelete = (index) => {
      starterList.splice(index,1)
      setStartList([
          ...starterList
      ]);
      // after an item is deleted from startList i update the localStorage to reflect deleted pokemon 
      localStorage.setItem('starterList', JSON.stringify(starterList));
  }

  const handleLibraryDelete = (index) => {

    const starterLibraryPokedex = JSON.parse(localStorage.getItem('starterLibrary'));
    starterLibraryPokedex.splice(index, 1);
    setlibrary([
      ...starterLibraryPokedex
    ]);
    // after an item is deleted from startList i update the localStorage to reflect deleted pokemon 
    localStorage.setItem('starterLibrary', JSON.stringify(starterLibraryPokedex));

    const localStartPokemons = JSON.parse(localStorage.getItem('starterList'));
    localStartPokemons.splice(index,1)
    setStartList([
      ...localStartPokemons
    ]);
    localStorage.setItem('starterList', JSON.stringify(localStartPokemons));
}

      useEffect(() => {
            const localStartPokemons = JSON.parse(localStorage.getItem('starterList'));
                setStartList([
                    ...starterList, ...localStartPokemons
                ]);

            const localStartLibrary = JSON.parse(localStorage.getItem('starterLibrary'));
            setlibrary([
              ...starterLibrary, ...localStartLibrary
          ]);


        }, []);

    console.log(starterList);
    console.log(starterLibrary)
  
  return (
    <UserProvider>
      <html lang="en">
        <PokedexContext.Provider value={{ handleNewPokedexEntry, currentBatchPokemon, handleNewBatch, setInitialPokemonList,handleNewStarterAdd,handleNewPokedexEntry, starterList, starterLibrary, handleStarterDelete, handleLibraryDelete }}>
          <body>
            <Header/>
              {children}
          </body>
        </PokedexContext.Provider>
      </html>
    </UserProvider>
  )
}
